"Reverse - Double - Reverse in python"

Leetcode solution link: https://leetcode.com/problems/double-a-number-represented-as-a-linked-list/solutions/5126067/reverse-double-reverse-in-python/

# Intuition
<!-- Describe your first thoughts on how to solve this problem. -->
The problem seems to involve two steps: reversing a linked list and then performing a numerical operation on the reversed list.

# Approach
<!-- Describe your approach to solving the problem. -->
1. Reverse the Linked List: We first reverse the given linked list. This can be done iteratively by traversing the list and updating the pointers accordingly.
2. Double the Values and Manage Carry: After reversing, traverse the reversed list again, doubling each node's value while managing any carry that arises.
3. Reverse the List Back: Finally, reverse the modified list again to obtain the desired result.

# Complexity
Time complexity:
Reversing the linked list takes O(n) time, where n is the number of nodes in the list.
Doubling the values and managing carry also takes O(n) time.
Reversing the list again takes O(n) time.
Thus, the overall time complexity is O(n).

Space complexity:
We are using a constant amount of extra space throughout the algorithm.
Hence, the space complexity is O(1).

# Code
```
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        dummy = ListNode(0,head)
        if not head or not head.next:
            return head
        prev,cur = dummy, head
        while cur:
            temp = cur.next
            cur.next = prev
            prev = cur
            cur = temp
        dummy.next,head.next = None,None
        return prev
    def doubleIt(self, head: Optional[ListNode]) -> Optional[ListNode]:
        new_head = self.reverseList(head)
        prev,cur,carry = ListNode(0,new_head),new_head,0
        while cur:
            ans = (cur.val * 2) + carry
            cur.val = ans % 10
            carry = ans // 10
            prev = cur
            cur = cur.next
        if carry == 1:
            prev.next = ListNode(1,None)
        return self.reverseList(new_head)
        
```