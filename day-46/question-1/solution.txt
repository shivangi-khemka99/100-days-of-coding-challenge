"Palindrome Partitioning with Backtracking"

Leetcode solution title: https://leetcode.com/problems/palindrome-partitioning/solutions/5193816/palindrome-partitioning-with-backtracking/

# Intuition
<!-- Describe your first thoughts on how to solve this problem. -->
The goal is to partition the input string s into all possible lists of substrings where each substring is a palindrome. The problem lends itself well to a backtracking solution because we need to explore all potential ways to split the string and then check if each split forms valid palindromic substrings.

# Approach
<!-- Describe your approach to solving the problem. -->
Backtracking Function: We'll use a helper function to perform the backtracking. This function will try to partition the string from the current index i to the end.

Palindrome Check: For each possible split, we'll check if the substring from the current index i to the current end index is a palindrome.

Recursive Call: If the substring is a palindrome, we add it to the current partition list and recursively call the helper function to continue partitioning from the next index j+1.

Base Case: When we reach the end of the string, we add the current partition list to the result list.

Backtracking: After exploring a partition, we remove the last substring and backtrack to try the next possible partition.

# Complexity
- Time complexity: O(n * (2^n))
<!-- Add your time complexity here, e.g. $$O(n)$$ -->

- Space complexity: O(n)
<!-- Add your space complexity here, e.g. $$O(n)$$ -->

# Code
```
class Solution:
    def partition(self, s: str) -> List[List[str]]:
        res = []
        part = []
        def helper(i):
            if i >= len(s):
                res.append(part.copy())
                return
            
            for j in range(i, len(s)):
                if self.isPali(s, i , j):
                    part.append(s[i:j+1])
                    helper(j+1)
                    part.pop()
        helper(0)
        return res
        
    def isPali(self, s, l, r):
        while l < r:
            if s[l]!=s[r]:
                return False
            l+=1
            r-=1
        return True
```