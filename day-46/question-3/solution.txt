"Maximum Score Words Formed by Letters Using Backtracking"

Leetcode solution link: https://leetcode.com/problems/maximum-score-words-formed-by-letters/solutions/5202628/maximum-score-words-formed-by-letters-using-backtracking/

# Intuition
<!-- Describe your first thoughts on how to solve this problem. -->
To solve the problem of finding the maximum score of any valid set of words formed by given letters, we need to explore all possible combinations of words. This suggests a recursive approach with backtracking, which will allow us to include or exclude each word and keep track of the highest score we can achieve.

# Approach
<!-- Describe your approach to solving the problem. -->
Helper Functions:
can_form_word(w): Checks if a word w can be formed with the available letters.
word_score(w): Computes the score of a word based on the given score list.

Recursive Backtracking:
Use a recursive helper function to explore including and excluding each word.
Update the count of available letters when including a word and revert back after exploring that path.
Track the maximum score encountered during the recursion.

# Complexity
- Time complexity:
<!-- Add your time complexity here, e.g. $$O(n)$$ -->
The time complexity is O(2^n), where n is the number of words. This is because, in the worst case, we need to explore all subsets of words, and there are 2^n possible subsets.

- Space complexity:
<!-- Add your space complexity here, e.g. $$O(n)$$ -->
The space complexity is O(n+k), where n is the depth of the recursion stack (which is at most the number of words), and k is the number of unique letters (for the Counter object).

# Code
```
from collections import Counter
from typing import List

class Solution:
    def maxScoreWords(self, words: List[str], letters: List[str], score: List[int]) -> int:
        letter_cnt = Counter(letters)
        def can_form_word(w):
            word_cnt = Counter(w)
            for c in word_cnt:
                if word_cnt[c] > letter_cnt[c]:
                    return False
            return True

        def word_score(w):
            return sum(score[ord(c) - ord('a')] for c in w)

        def helper(i, current_score):
            nonlocal max_score
            if i >= len(words):
                max_score = max(max_score, current_score)
                return

            # Option 1: Include words[i] if possible
            if can_form_word(words[i]):
                for c in words[i]:
                    letter_cnt[c] -= 1
                helper(i + 1, current_score + word_score(words[i]))
                for c in words[i]:
                    letter_cnt[c] += 1
            
            # Option 2: Do not include words[i]
            helper(i + 1, current_score)

        max_score = 0
        helper(0, 0)
        return max_score
```