"Merge Sorted Arrays In-Place with Two-Pointer Technique"

Leetcode solution link: https://leetcode.com/problems/merge-sorted-array/solutions/4732736/merge-sorted-arrays-in-place-with-two-pointer-technique/

# Intuition
<!-- Describe your first thoughts on how to solve this problem. -->
The problem requires merging two sorted arrays nums1 and nums2 into nums1. One intuitive approach is to start from the end of both arrays where there's space in nums1, comparing elements from both arrays and placing the larger one at the end of nums1.

# Approach
<!-- Describe your approach to solving the problem. -->
We initialize pointers a, b, and last, where a and b initially point to the last elements of nums1 and nums2, and last points to the last available position in nums1. We then iterate backward through both arrays, comparing elements at a and b, and placing the larger element at last. We continue this process until all elements from nums2 are merged into nums1.

# Complexity
Time complexity:
The time complexity is O(m + n), where m and n are the lengths of nums1 and nums2 respectively. We iterate through both arrays once, and each iteration takes constant time.

Space complexity:
We use only constant extra space for variables, resulting in O(1) space complexity.

# Code
```
class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        """
        Do not return anything, modify nums1 in-place instead.
        """
        a,b,last = m-1, n-1, m+n-1

        while a>=0 and b>=0:
            if nums1[a] > nums2[b]:
                nums1[last] = nums1[a]
                a-=1
            else:
                nums1[last] = nums2[b]
                b-=1
            last-=1
            
        while b >= 0:
            nums1[last] = nums2[b]
            b-=1
            last-=1
```