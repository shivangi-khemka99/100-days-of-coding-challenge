"Efficient Solution for Deep Copying Linked List with Random Pointers"

Leetcode solution link: https://leetcode.com/problems/copy-list-with-random-pointer/solutions/5072121/efficient-solution-for-deep-copying-linked-list-with-random-pointers/

# Intuition
<!-- Describe your first thoughts on how to solve this problem. -->
To copy a linked list with random pointers, we need to traverse the original list and create a copy of each node, while also keeping track of the mapping between original nodes and their corresponding copies. Once we have created copies of all nodes, we can traverse the original list again to set the next and random pointers for each copied node.

# Approach
<!-- Describe your approach to solving the problem. -->
1. We create a dictionary (oldToCopy) to store the mapping between original nodes and their copies. We initialize it with None: None to handle the case where the original list is empty.
2. We traverse the original list once. For each node encountered, we create a copy of it and store the mapping between the original node and its copy in the oldToCopy dictionary.
3. We traverse the original list again. For each node encountered:
We set the next pointer of the corresponding copy to the copy of the original node's next node.
We set the random pointer of the corresponding copy to the copy of the original node's random node.
4. Finally, we return the copy of the head node.

# Complexity
Time complexity: O(n), where n is the number of nodes in the original list. We traverse the original list twice.

Space complexity: O(n), where n is the number of nodes in the original list. We use extra space to store the mapping between original nodes and their copies.

# Code
```
"""
# Definition for a Node.
class Node:
    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):
        self.val = int(x)
        self.next = next
        self.random = random
"""

class Solution:
    def copyRandomList(self, head: 'Optional[Node]') -> 'Optional[Node]':
        
        oldToCopy = { None : None }
        
        cur = head
        while cur:
            copy = Node(cur.val)
            oldToCopy[cur] = copy
            cur = cur.next
        
        cur = head
        while cur:
            copy = oldToCopy[cur]
            copy.next = oldToCopy[cur.next]
            copy.random = oldToCopy[cur.random]
            cur = cur.next
        
        return oldToCopy[head]
        
```