"Efficient Anagram Detection using Python's Counter Class"

Leetcode solution link: https://leetcode.com/problems/valid-anagram/solutions/4671856/efficient-anagram-detection-using-python-s-counter-class/

# Intuition
The intuition behind this solution is to leverage Python's `Counter` class from the `collections` module, which simplifies the process of checking whether two strings are anagrams. By comparing the dictionaries of character counts generated by `Counter` for both strings, the solution efficiently determines if the strings are anagrams.

# Approach
1. Import the `Counter` class from the `collections` module.
2. Create `Counter` objects for both strings `s` and `t` using `Counter(s)` and `Counter(t)`.
3. Check if the two `Counter` objects are equal, which implies that the strings are anagrams.

# Complexity
- Time complexity: O(N)
  - Constructing `Counter` objects for strings `s` and `t` takes O(N) time, where N is the length of the input strings.
  - Comparing two dictionaries for equality also takes O(N) time, where N is the size of the dictionaries.

- Space complexity: O(K)
  - The space complexity is determined by the size of the dictionaries created by `Counter`. In the worst case, when all characters are unique, the size of the dictionaries would be proportional to the length of the input strings (O(N)).

Code
from collections import Counter
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        return Counter(s) == Counter(t)
    #O(N)