"Linked List Element Remover"

Leetcode solution link: https://leetcode.com/problems/remove-linked-list-elements/solutions/4764076/linked-list-element-remover/

# Intuition
<!-- Describe your first thoughts on how to solve this problem. -->
The problem requires removing all elements from a linked list that have a specific value.

# Approach
<!-- Describe your approach to solving the problem. -->
1. Create a dummy node and set its next pointer to the head of the linked list. This helps in handling cases where the first node of the list needs to be removed.
2. Initialize two pointers, prev and temp, pointing to the dummy node and the head of the linked list, respectively.
3. Traverse the linked list.
4. If the value of the current node (temp) is equal to the given value (val), update the next pointer of the previous node (prev) to skip the current node.
5. Otherwise, move both pointers (prev and temp) to the next node.
6. Continue this process until the end of the linked list is reached.
7. Return the next pointer of the dummy node, which represents the head of the modified linked list.

# Complexity
Time complexity:
The algorithm traverses the entire linked list once, so the time complexity is O(n), where n is the number of nodes in the list.

Space complexity:
The algorithm uses only a constant amount of extra space, so the space complexity is O(1).

# Code
```
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeElements(self, head: Optional[ListNode], val: int) -> Optional[ListNode]:
        dummy = ListNode(next = head)
        prev,temp = dummy, head

        while temp:
            if temp.val == val:
                prev.next = temp.next
            else:
                prev = temp
            temp = temp.next
            
        return dummy.next
```