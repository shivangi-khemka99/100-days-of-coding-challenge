"Maximize Stock Profit with Two-Pointer Approach"

Leetcode solution link: https://leetcode.com/problems/best-time-to-buy-and-sell-stock/solutions/4738601/maximize-stock-profit-with-two-pointer-approach/

# Intuition
<!-- Describe your first thoughts on how to solve this problem. -->
The problem involves finding the maximum profit that can be obtained by buying and selling a stock.

# Approach
<!-- Describe your approach to solving the problem. -->
To solve this problem, we can use a two-pointer approach. We initialize two pointers, l and r, representing the positions of the buy and sell actions, respectively. We iterate through the prices array with r and update l only when we find a lower price. For each pair of prices, we calculate the profit (prices[r] - prices[l]) and update the maximum profit if necessary.

# Complexity
Time complexity: O(n) - We iterate through the prices array once.
Space complexity: O(1) - We only use a constant amount of extra space.

# Code
```
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        l,r,profit = 0,1,0
        while(r<len(prices)):
            if prices[l] > prices[r]:
                l=r
            else:
                profit = max(profit, prices[r]-prices[l])
            r+=1
        return profit
```