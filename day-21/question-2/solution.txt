"Removing Nth Node from End of Linked List: Two-Pointer Approach"

Leetcode solution link: https://leetcode.com/problems/remove-nth-node-from-end-of-list/solutions/4777278/removing-nth-node-from-end-of-linked-list-two-pointer-approach/

# Intuition
<!-- Describe your first thoughts on how to solve this problem. -->
To remove the nth node from the end of a singly-linked list, we need to identify the node to be removed and adjust the pointers accordingly. One approach is to use two pointers, a fast pointer and a slow pointer, to maintain a gap of n nodes between them. When the fast pointer reaches the end of the list, the slow pointer will be pointing to the node preceding the one to be removed.

# Approach
<!-- Describe your approach to solving the problem. -->
1. Create a dummy node to handle edge cases where the head needs to be removed.
2. Initialize two pointers, l and r, both pointing to the dummy node initially.
3. Move the r pointer n steps forward.
4. Move both pointers l and r simultaneously until r reaches the end of the list.
4. Once r reaches the end, l will be pointing to the node preceding the one to be removed.
5. Adjust the pointers to remove the nth node from the end by skipping over it.
6. Return the modified linked list.
7. 
# Complexity
Time complexity: O(n), where n is the number of nodes in the linked list. We traverse the list twice, once to move the r pointer to the nth node from the beginning and once to find the node to be removed.

Space complexity: O(1), as we are using only a constant amount of extra space for pointers and variables.

# Code
```
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        dummy = ListNode(0, head)
        l,r = dummy, head
        prev = None
        i = 0
        while n > 0:
            r = r.next
            n-=1

        while r:
            prev = l
            l = l.next
            r = r.next

        l.next = l.next.next
        # prev.next = l.next
        return dummy.next
```