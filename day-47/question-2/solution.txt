"Sliding Window Approach to Find the Longest Equal Substring Within Cost Constraint"

Leetcode solution link: https://leetcode.com/problems/get-equal-substrings-within-budget/solutions/5221917/sliding-window-approach-to-find-the-longest-equal-substring-within-cost-constraint/

# Intuition
<!-- Describe your first thoughts on how to solve this problem. -->
The problem involves finding the longest substring where the cost of changing characters from s to t is within a given maxCost. This can be thought of as a sliding window problem where we try to maintain a window with a sum of costs not exceeding maxCost.

# Approach
<!-- Describe your approach to solving the problem. -->
Sliding Window: Use two pointers (l and r) to represent the current window in the strings s and t.
Cost Calculation: Calculate the cost to change s[r] to t[r] and keep a running sum of these costs.
Expand and Contract Window:
If adding the current character's cost keeps the total cost within maxCost, expand the window by moving r to the right.
If adding the current character's cost exceeds maxCost, contract the window by moving l to the right until the total cost is within maxCost.
Track Maximum Length: After each adjustment, update the maximum length of the window (r - l).

# Complexity
- Time complexity:
<!-- Add your time complexity here, e.g. $$O(n)$$ -->
O(N)
- Space complexity:
<!-- Add your space complexity here, e.g. $$O(n)$$ -->
O(1)

# Code
```
class Solution:
    def equalSubstring(self, s: str, t: str, maxCost: int) -> int:
        l,r = 0,0
        summ,res = 0,0
        while l<len(s) and r<len(s):
            if summ + abs(ord(s[r]) - ord(t[r])) <= maxCost:
                summ += abs(ord(s[r]) - ord(t[r]))
                r+=1
            else:
                summ -= abs(ord(s[l]) - ord(t[l]))
                l+=1
            res = max(res,r-l)
        return res
```