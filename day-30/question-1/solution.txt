"Stack Sequence Validation Efficient Algorithm"

Leetcode solution link: https://leetcode.com/problems/validate-stack-sequences/solutions/5076618/stack-sequence-validation-efficient-algorithm/

# Intuition
<!-- Describe your first thoughts on how to solve this problem. -->
The intuition here seems to be to iterate through the pushed and popped arrays while simulating the stack operations.

# Approach
<!-- Describe your approach to solving the problem. -->
The approach involves using a stack to simulate the operations. We iterate through the pushed array, pushing elements onto the stack. Then, as long as the top of the stack matches the next element to be popped, we pop elements from the stack and move forward in the popped array.

# Complexity
Time complexity:
In the worst case, we iterate through each element of the pushed and popped arrays once, resulting in a time complexity of O(n), where n is the length of the input arrays.

Space complexity:
The space complexity is also O(n) because we use a stack that could potentially hold all elements of the pushed array.

# Code
```
class Solution:
    def validateStackSequences(self, pushed: List[int], popped: List[int]) -> bool:
        stack = []
        pos1,pos2 = 0,0
        while pos1<len(pushed) and pos2<len(popped):
            stack.append(pushed[pos1])
            while(stack and stack[-1] == popped[pos2]):
                stack.pop()
                pos2+=1
            pos1+=1
        
        return not stack 
```