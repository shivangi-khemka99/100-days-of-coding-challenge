"Efficient Version Comparison Algorithm: Optimized Time - O(max(n,m)) and Space Complexity - O(1)"

Leetcode solution link: https://leetcode.com/problems/compare-version-numbers/solutions/5106035/efficient-version-comparison-algorithm-optimized-time-o-max-n-m-and-space-complexity-o-1/

# Intuition
<!-- Describe your first thoughts on how to solve this problem. -->
The problem asks to compare two version numbers version1 and version2. We can do this by splitting the version strings into their components and comparing each component sequentially.

# Approach
<!-- Describe your approach to solving the problem. -->
1. Initialize two pointers v1 and v2 to keep track of the current position in each version string.
2. Iterate through the version strings until we reach the end of both strings.
3. While iterating, extract each component of the version number delimited by '.' and convert it to an integer.
4. Compare the components of both versions. If the component from version1 is greater, return 1. If the component from version2 is greater, return -1. If they are equal, continue to the next component.
5. If one version string has more components, continue iterating through the remaining components and treat missing components as zeros.
6. If both version strings are equal, return 0.

# Complexity
- Time complexity:
Time complexity: O(max(n,m)), where n and m are the lengths of version1 and version2, respectively.

Space complexity: O(1)

# Code
```
class Solution:
    def compareVersion(self, version1: str, version2: str) -> int:
        v1, v2 = 0, 0
        n, m = len(version1), len(version2)
        while v1 < n or v2 < m:
            num1, num2 = 0, 0
            while v1 < n and version1[v1] != '.':
                num1 = num1 * 10 + int(version1[v1])
                v1 += 1
            while v2 < m and version2[v2] != '.':
                num2 = num2 * 10 + int(version2[v2])
                v2 += 1
            if num1 > num2:
                return 1
            elif num1 < num2:
                return -1
            v1 += 1
            v2 += 1  
        return 0
```