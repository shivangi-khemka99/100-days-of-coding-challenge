"Efficient Monotone Digits: Optimal Time and Space Complexity Solution"

Leetcode solution link: https://leetcode.com/problems/monotone-increasing-digits/solutions/5106180/efficient-monotone-digits-optimal-time-and-space-complexity-solution/

# Intuition
<!-- Describe your first thoughts on how to solve this problem. -->
To find the largest monotone increasing number less than or equal to the given integer, we can traverse the digits of the integer from right to left. If we encounter a digit that is smaller than the previous one, we decrement the previous digit by one and set all subsequent digits to 9 to maintain the monotone increasing property. This ensures that we obtain the largest possible number satisfying the condition.

# Approach
<!-- Describe your approach to solving the problem. -->
1. Convert the integer to a list of digits.
2. Iterate through the digits from right to left.
3. If a digit is smaller than the previous one, decrement the previous digit by one and set all subsequent digits to 9.
4. Convert the list of digits back to an integer and return.

# Complexity
Time complexity: O(log n)
1. Converting the integer to a list of digits takes O(log n) time.
2. The loop iterates through the digits at most once, which also takes O(log n) time.
3. Setting subsequent digits to 9 takes constant time for each digit, so it doesn't affect the overall time complexity.
4. Therefore, the overall time complexity is O(log n).

Space complexity: O(d)
1. Converting the integer to a list of digits requires O(d) space where d is number of digits in "n".
2. The additional space used during the algorithm execution is O(1).
3. Thus, the overall space complexity is O(d).

# Code
```
class Solution:
    def monotoneIncreasingDigits(self, n: int) -> int:
        digits = [int(d) for d in str(n)]
        for i in range(len(digits) - 1, 0, -1):
            if digits[i] < digits[i - 1]:
                digits[i - 1] -= 1
                digits[i:] = [9] * (len(digits) - i)
        return int(''.join(map(str, digits)))
```