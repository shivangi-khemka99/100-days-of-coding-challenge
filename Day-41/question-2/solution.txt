"Finding Largest Values in Local 3x3 Grids"

Leetcode solution link: https://leetcode.com/problems/largest-local-values-in-a-matrix/solutions/5148633/finding-largest-values-in-local-3x3-grids/

# Intuition
<!-- Describe your first thoughts on how to solve this problem. -->
To find the largest value in each local 3x3 grid within the given grid, we can iterate through each cell in the grid and, for each cell, find the maximum value within its corresponding 3x3 subgrid.

# Approach
<!-- Describe your approach to solving the problem. -->
1. Initialize an empty 2D array res to store the largest values for each local 3x3 grid.
2. Iterate through each cell (i, j) in the grid, excluding the last two rows and columns to ensure a 3x3 subgrid.
3. For each cell (i, j), iterate through its corresponding 3x3 subgrid defined by the range (i, i+3) for rows and (j, j+3) for columns.
4. Find the maximum value within the subgrid and store it in res[i][j].
Return the resulting res array.

# Complexity
Time complexity: O(n^2), n is the size of the input grid. We iterate through each cell in the grid and perform constant time operations within each cell.

Space complexity: O(n^2), the space used by the res array to store the largest values for each local 3x3 grid.

# Code
```
class Solution:
    def largestLocal(self, grid: List[List[int]]) -> List[List[int]]:
        n = len(grid)
        res = [[0] * (n-2) for _ in range(n-2)] 
        for i in range(n-2):
            for j in range(n-2):
                for r in range(i,i+3):
                    for c in range(j,j+3):
                        res[i][j] = max(res[i][j], grid[r][c])
        return res
```