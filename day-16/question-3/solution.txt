"Binary Search for Number Guessing"

Leetcode solution link: https://leetcode.com/problems/guess-number-higher-or-lower/solutions/4747440/binary-search-for-number-guessing/

# Intuition
<!-- Describe your first thoughts on how to solve this problem. -->
The problem appears to involve guessing a number within a given range by using a predefined function guess which returns whether the guessed number is higher, lower, or equal to the target number.

# Approach
<!-- Describe your approach to solving the problem. -->
We can utilize the binary search algorithm to efficiently guess the number within the given range. We maintain two pointers, l and r, representing the left and right boundaries of the search range, respectively. In each iteration, we calculate the middle number as (l + r) // 2 and use the guess function to determine if it's equal to, higher, or lower than the target number. Based on the result, we adjust the search range by updating l or r. We repeat this process until the target number is guessed.

# Complexity
Time complexity: O(logn), where n is the size of the search space (the given range). Binary search efficiently reduces the search space in each iteration.

Space complexity: O(1), as the algorithm only uses a constant amount of additional space for pointers and variables.

# Code
```
# The guess API is already defined for you.
# @param num, your guess
# @return -1 if num is higher than the picked number
#          1 if num is lower than the picked number
#          otherwise return 0
# def guess(num: int) -> int:

class Solution:
    def guessNumber(self, n: int) -> int:
        l,r = 1,n
        while l<=r:
            mid = (l+r)//2
            if guess(mid) == 0:
                return mid
            elif guess(mid) == -1:
                r = mid-1
            else:
                l = mid+1
```