"Merge Sort for Linked Lists"

Leetcode solution link: https://leetcode.com/problems/sort-list/solutions/4786810/merge-sort-for-linked-lists/

# Intuition
<!-- Describe your first thoughts on how to solve this problem. -->
The problem requires sorting a linked list. One common approach for sorting is the merge sort algorithm due to its efficiency and suitability for linked lists.

# Approach
<!-- Describe your approach to solving the problem. -->
The approach used here is a recursive implementation of merge sort specifically tailored for linked lists. It involves the following steps:

Base case: If the list is empty or has only one node, it is already sorted, so we return the list.
Splitting: We find the middle of the list using the fast-slow pointer technique and split the list into two halves.
Recursion: We recursively sort the left and right halves of the list.
Merging: We merge the sorted left and right halves using the merge operation.

# Complexity
Time complexity: O(n log n) where n is the number of nodes in the linked list. This is because the algorithm divides the list in half recursively log n times and each merge operation takes linear time.

Space complexity: O(log n) due to the recursive calls on the stack.

# Code
```
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if not head or not head.next:
            return head

        left = head
        right = self.getMid(head)
        temp = right.next
        right.next = None
        right = temp

        left = self.sortList(left)
        right = self.sortList(right)

        return self.Merge(left,right)

    def getMid(self,head):
        slow, fast = head, head.next

        while fast and fast.next:
            fast = fast.next.next
            slow = slow.next
        return slow
    
    def Merge(self, left, right):
        tail = dummy = ListNode()

        while left and right:
            if left.val <= right.val:
                tail.next = left
                left = left.next
            else:
                tail.next = right
                right = right.next
            tail = tail.next
        if left:
            tail.next = left
        if right:
            tail.next = right
        return dummy.next
```