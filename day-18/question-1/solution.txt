"Binary Search for Integer Square Root"

Leetcode solution link: https://leetcode.com/problems/sqrtx/solutions/4757650/binary-search-for-integer-square-root/

# Intuition
<!-- Describe your first thoughts on how to solve this problem. -->
The problem involves finding the square root of a given non-negative integer.

# Approach
<!-- Describe your approach to solving the problem. -->
We can utilize binary search to efficiently find the square root of the given integer within the range [1, x]. We maintain two pointers, l and r, representing the lower and upper bounds of the search range, respectively. In each iteration, we calculate the square of the middle number using the formula mid ** 2. If the square equals the given number, we return the middle number as the square root. If the square is greater than the given number, we adjust the upper bound r to search in the lower half. If the square is less than the given number, we adjust the lower bound l to search in the upper half. We repeat this process until the search range is exhausted.

# Complexity
Time complexity: O(logn), where n is the given number. Binary search efficiently narrows down the search range in each iteration.

Space complexity: O(1), as the algorithm only uses a constant amount of additional space for pointers and variables.

# Code
```
class Solution:
    def mySqrt(self, x: int) -> int:
        l,r = 1,x
        res = 0
        while l<=r:
            mid = (l+r)//2
            sq = mid**2
            if sq == x:
                return mid
            elif sq > x:
                r = mid - 1
            else:
                l = mid + 1
                res = max(res,mid)
        return res 
```