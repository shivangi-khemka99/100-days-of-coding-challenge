"Stock Trading Profit Maximization"

Leetode solution link: https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/solutions/4722201/stock-trading-profit-maximization/

# Intuition
<!-- Describe your first thoughts on how to solve this problem. -->
The problem seems to involve finding the maximum profit that can be obtained by buying and selling stocks. The intuition here could be to track the price differences between consecutive days and accumulate the positive differences as they represent profitable transactions.

# Approach
<!-- Describe your approach to solving the problem. -->
The approach taken here is straightforward. Iterate through the prices list and for each pair of consecutive days, if the price on the next day is higher than the price on the current day, add the difference to the profit. This essentially simulates buying on one day and selling on the next if it's profitable.

# Complexity
Time complexity:
The algorithm iterates through the prices list once, making it linear with respect to the length of the list. Hence, the time complexity is O(n), where n is the number of prices.

Space complexity:
The space complexity of the algorithm is constant, O(1), as it only uses a fixed amount of extra space regardless of the size of the input.

# Code
```
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        profit = 0
        for i in range(len(prices)-1):
            if prices[i+1] > prices[i]:
                profit += prices[i+1] - prices[i]
        return profit
    #O(N)
```