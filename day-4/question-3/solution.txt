"Isomorphic String Mapping Check"

Leetcode solution link: https://leetcode.com/problems/isomorphic-strings/solutions/4688123/isomorphic-string-mapping-check/

# Intuition
<!-- Describe your first thoughts on how to solve this problem. -->
The problem requires determining whether two given strings s and t are isomorphic. Strings are considered isomorphic if characters in s can be replaced to get t while preserving the order of characters. One intuitive approach is to map characters from s to characters in t and vice versa, ensuring that each character in s corresponds to exactly one character in t, and vice versa.

# Approach
<!-- Describe your approach to solving the problem. -->
1. Check if the lengths of strings s and t are equal. If not, they cannot be isomorphic, so return False.
2. Initialize an empty dictionary isomeric_dict to store mappings between characters of s and t.
3. Iterate through each character of s and t simultaneously using a loop.
4. For each character in s, check if it is already mapped in isomeric_dict. )If not, check if the corresponding character in t is already mapped to a different character in s. If it is, return False as it violates the isomorphic condition. Otherwise, add the mapping to isomeric_dict.
5. If the character in s is already mapped in isomeric_dict, check if it maps to the correct character in t. If not, return False.
6. If all characters are mapped correctly, return True, indicating that the strings are isomorphic.

# Complexity
Time complexity:
The algorithm iterates through each character of the input strings s and t once, performing constant-time operations for each character. Thus, the overall time complexity is O(n), where n is the length of the input strings.

Space complexity:
The algorithm utilizes a dictionary isomeric_dict to store mappings between characters of s and t, which can grow to contain all characters of the input strings in the worst case. Therefore, the space complexity is O(n), where n is the length of the input strings.

# Code
```
class Solution:
    def isIsomorphic(self, s: str, t: str) -> bool:
        if len(s) != len(t):
            return False
        isomeric_dict = {}
        for i in range(len(s)):
            if s[i] not in isomeric_dict:
                if t[i] in isomeric_dict.values():
                    return False
                isomeric_dict[s[i]] = t[i]
            elif isomeric_dict[s[i]] != t[i]:
                return False
        
        return True
    #O(N)
```